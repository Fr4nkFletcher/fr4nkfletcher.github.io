[
  
  {
    "title": "Building a Web Server in Assembly: An In-Depth Exploration",
    "url": "/posts/Building_a_webserver_in_Assembly/",
    "categories": "",
    "tags": "assembly, assembly webserver, socket programming, file serving",
    "date": "2024-09-15 00:00:00 -0500",
    





    
    "snippet": "In this post, we will explore how to build a simple web server in assembly that can handle HTTP requests and serve a file in Linux.IntroductionBuilding a web server in assembly language is a great ...",
    "content": "In this post, we will explore how to build a simple web server in assembly that can handle HTTP requests and serve a file in Linux.IntroductionBuilding a web server in assembly language is a great way to dive deep into how low-level socket programming works. In this project, we will set up a server that listens for incoming connections, accepts them, and responds with the contents of a file. For this example, we will serve a file called flag from the /home/ffletch/ directory.PrerequisitesMake sure you have the following installed before proceeding:  gcc or any assembler tool like as (GNU Assembler)  ld (GNU Linker)  strace for debugging (optional)Ensure you have created a flag file at /home/ffletch/flag or wherever for the server to serve. You can do this by running:echo \"This is the flag file content!\" &gt; /home/ffletch/flagUnderstanding System CallsIn Linux, system calls are how user-space programs interact with the kernel. In assembly, system calls are made by setting the appropriate system call number in the rax register and executing the syscall instruction. Arguments are passed through registers such as rdi, rsi, and rdx.Here are some system calls we will use:  socket(): Create an endpoint for communication.  bind(): Associate the socket with a local address (IP/port).  listen(): Mark the socket to accept incoming connections.  accept(): Extract the first connection on the queue of pending connections.  read(): Read data from a file descriptor (like a socket).  write(): Write data to a file descriptor (such as a socket).  close(): Close the file descriptor, freeing the associated resources.System Call Number ReferenceIn your assembly code, you directly use system call numbers in the rax register to invoke system calls via the syscall instruction. Here is a table mapping the system call names to their corresponding numbers on the x86_64 Linux architecture:            System Call      Number (rax)      Description                  socket      41      Create an endpoint for communication.              bind      49      Bind a socket to an address.              listen      50      Listen for incoming connections on a socket.              accept      43      Accept a connection on a socket.              read      0      Read data from a file descriptor.              write      1      Write data to a file descriptor.              close      3      Close a file descriptor.              exit      60      Terminate the calling process.      For a more complete list of Linux system calls, you can check the full list here.Full Code.intel_syntax noprefix.global _start.section .datasockaddr_in:      .word 2                # AF_INET (IPv4)    .word 0x5000           # Port 80 in network byte order (0x5000)    .long 0                # INADDR_ANY (bind to any address)response_header:    .ascii \"HTTP/1.0 200 OK\\r\\n\\r\\n\"  # HTTP headerbuffer:                         .space 1024             # Buffer to store the incoming requestfile_buffer:                    .space 1024             # Buffer to store the file contentsfile_path:    .ascii \"/home/ffletch/flag\"  # Path to the file.section .text_start:    # Create a socket    mov rdi, 2              # AF_INET (IPv4)    mov rsi, 1              # SOCK_STREAM (TCP)    mov rdx, 0              # Protocol    mov rax, 41             # socket()    syscall    mov rdi, rax            # Save socket file descriptor    # Bind the socket    lea rsi, [rip + sockaddr_in]     mov rdx, 16             # sockaddr_in size    mov rax, 49             # bind()    syscall    # Listen for connections    mov rsi, 0              # Backlog of 0    mov rax, 50             # listen()    syscall    # Accept a connection    xor rsi, rsi            # NULL for client address    xor rdx, rdx            # NULL for addrlen    mov rax, 43             # accept()    syscall    mov rdi, rax            # Save client socket file descriptor    # Read the HTTP request    lea rsi, [rip + buffer]      mov rdx, 1024                mov rax, 0               # read()    syscall    # Open the requested file    lea rdi, [rip + file_path]      mov rsi, 0                  # O_RDONLY    mov rax, 2                  # open()    syscall    mov r8, rax                 # Save file descriptor    # Read the file contents    lea rsi, [rip + file_buffer]     mov rdx, 1024                # Number of bytes to read    mov rdi, r8                  # Use file descriptor    mov rax, 0                   # read()    syscall    mov rdx, rax                 # Store the number of bytes read    # Send HTTP response header    mov rdi, 4                   # File descriptor (the client connection)    lea rsi, [rip + response_header]     mov rdx, 19                  # Length of HTTP header (19 bytes)    mov rax, 1                   # write()    syscall    # Send file contents    lea rsi, [rip + file_buffer]     mov rax, 1                   # write()    syscall    # Close the file and connection    mov rdi, r8                  # Close file descriptor    mov rax, 3                   # close()    syscall    mov rdi, 4                   # Close socket    mov rax, 3                   # close()    syscall    # Exit the program    mov rdi, 0                   # Exit status 0    mov rax, 60                  # exit()    syscallHow to Compile and RunHere’s how you can compile and run the assembly web server step-by-step:Step 1: Compile the Assembly CodeTo compile the assembly code, you will use the GNU Assembler (as) and Linker (ld).as -o server.o server.s &amp;&amp; ld -o server server.oThis will create an executable named server.Step 2: Run the ServerOnce compiled, run the server to start listening on port 80.sudo ./serverYou will need sudo because port 80 is a privileged port, and you will only be able to bind to it with elevated permissions.Step 3: Verify Server is RunningYou can use netstat or ss to check that the server is indeed listening on port 80:sudo ss -tuln | grep :80Interacting with the Server using CurlNow that the web server is up and running, you can interact with it using curl to make HTTP requests. Follow the steps below to fetch the contents of the file.Example 1: Fetch the FileYou can use curl to send a GET request to the server. Open a new terminal and run the following command:curl http://localhost:80If everything is working correctly, the server will respond with the contents of the file /home/ffletch/flag.Example 2: Save the Output to a FileYou can use curl to fetch the content and save it to a file:curl http://localhost:80 -o output.txtcat output.txtThis is the flag file content!This will save the response to output.txt.Step 3: Debugging with straceIf you’re encountering issues, you can use strace to trace the system calls being made by the server. This can help you understand where things might be going wrong.sudo strace -f -e trace=open,read,write ./serverWith strace, you’ll see the system calls related to opening the file, reading its contents, and writing the response back to the client.ConclusionThis project walks you through building a simple web server in assembly that listens on port 80, accepts connections, and serves a file in response to HTTP requests. By interacting with the server using curl and tracing the system calls with strace, you can gain a deep understanding of low-level socket programming and file serving in assembly. We also covered various ways to interact with the server using curl, including saving output to a file."
  },
  
  {
    "title": "Enhancing ESP Board Reception without an External Antenna Connector",
    "url": "/posts/ESP32_ANTENNA_MOD/",
    "categories": "",
    "tags": "esp, rx/tx, antenna, mod, esp32",
    "date": "2024-09-14 00:00:00 -0500",
    





    
    "snippet": "If you’ve purchased an ESP board that lacks a connector for an external antenna and you’re experiencing the limits of reception, there’s a solution that doesn’t involve the complex task of moving a...",
    "content": "If you’ve purchased an ESP board that lacks a connector for an external antenna and you’re experiencing the limits of reception, there’s a solution that doesn’t involve the complex task of moving a tiny 0603 sized resistor to utilize the external antenna socket on some boards.This workaround is relatively simple and the required parts are inexpensive, often found on platforms like eBay or AliExpress for just a few dollars.Required Components  ESP/CYD of your choosing  UFL to reverse polarity SMA lead with UFL connector removed and 5mm of shield and center exposed and tinned with solder  Reverse polarity SMA 2.4GHz antennaStep-by-Step Guide1. Prepare Your Workspace and ToolsMake sure you have a steady hand and the right tools. A fine soldering tip and some magnification can help.2. Locate the Antenna Connection PointsIdentify the points on your ESP board where the antenna connects. This will be your working area.3. Attach the AntennaCarefully solder the antenna’s lead to the designated point on the ESP board. Ensure a solid connection without bridging adjacent contacts.4. Test the ConnectionBefore proceeding further, it’s crucial to test the connection. Use a multimeter to ensure there’s nothing short.5. Seal and ProtectOnce you’ve confirmed the functionality, consider using some non-conductive lacquer to protect the exposed soldered area.6. Final TestingWith the external antenna now attached, test the ESP board’s reception in its intended environment. You should notice a significant improvement in signal strength and stability.ConclusionBy following these steps, you can significantly improve the reach of your esp32. For more information and examples, click here."
  },
  
  {
    "title": "Adding an antenna to the Cheap Yellow Display the easy way",
    "url": "/posts/CYD-WROOM-32U-SWAP/",
    "categories": "",
    "tags": "cyd, cheap yellow display, antenna, wroom-32u mod, ufl, ipex",
    "date": "2024-09-14 00:00:00 -0500",
    





    
    "snippet": "You can exchange the stock ESP-WROOM-32 for the WROOM-32U with a built-in ipex/u.fl connector.Materials  WROOM-32U Module          Available on AliExpress or Amazon        SMA Antenna          Sugg...",
    "content": "You can exchange the stock ESP-WROOM-32 for the WROOM-32U with a built-in ipex/u.fl connector.Materials  WROOM-32U Module          Available on AliExpress or Amazon        SMA Antenna          Suggested: Amazon Link        UFL to SMA Adapter          Available on Amazon        Flux          I like Amtech        Solder Paste          I use Mechanic        Hot Air Station    Procedure  Step 1: Preparation  Setup: Clean your workspace. Secure the board to prevent movement during the process.  Flux: Liberally apply flux around the ESP-WROOM module. Struggling? Use more flux.Step 2: Module Removal      Heat Application: Set the hot air station to approximately 350-400°C. Apply heat evenly across the module to avoid damage to adjacent components.            Remove the Module: Once the solder is molten, carefully lift the ESP-WROOM module using tweezers. If it resists, apply additional heat as needed.            Clean the Pads: Add solder to the esp pads on the CYD, use solder braid to remove it, clean with IPA, and then lay down solder paste.      Step 3: Install the WROOM-32U  Position the Module: If you don’t use solder paste simply ensure correct alignment and solder a pin at each corner.  Hot Air: If you chose the hot air route, apply heat evenly until the paste flows. After the initial set, apply more heat and give the module a tap with tweezers ever so slightly for it to seat fully.  Inspect the Joints: Thoroughly inspect the solder joints for any defects such as cold joints or bridges. A microscope is invaluable for this and many other challenges you’ll face.Step 4: Reflash Marauder  CYM WebFlasher:https://fr4nkfletcher.github.io/Adafruit_WebSerial_ESPTool/Step 5: Attach the Antenna  Select an Antenna: Choose an appropriate antenna for your application. Recommended options are available on Amazon.  Connect the Antenna: Attach the UFL to SMA adapter to the WROOM-32U, then connect the SMA antenna.      Test the Board: Power on the board and have fun. Don’t be a dick!      "
  }
  
]

